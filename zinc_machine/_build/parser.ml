type token =
  | INT of (int)
  | IDENT of (string)
  | FILE_NAME of (string)
  | LPAREN
  | RPAREN
  | BEGIN
  | END
  | LET
  | REC
  | IF
  | ELSE
  | THEN
  | IN
  | COLON
  | COMMA
  | FUN
  | ARROW
  | E
  | TRY
  | WITH
  | PLUS
  | TIMES
  | MINUS
  | EQUAL
  | DIV
  | ENDEXPR
  | REFLET
  | REF
  | EOL
  | RAISE
  | BANG
  | OR
  | AND
  | SGT
  | GT
  | SLT
  | LT
  | NEQUAL
  | NOT
  | PRINTIN
  | AMAKE
  | ARRAYAFFECTATION
  | DOT
  | CONSTRUCTOR of (string)
  | UNDERSCORE
  | SEQ
  | TRUE
  | FALSE
  | OPEN
  | MATCH
  | LISTINSERT
  | RBRACKET
  | LBRACKET
  | INFIX_OP_0 of (string)
  | INFIX_OP_1 of (string)
  | INFIX_OP_2 of (string)
  | INFIX_OP_3 of (string)
  | INFIX_OP_4 of (string)
  | INFIX_OP_REF of (string)
  | PREFIX_OP of (string)
  | TYPE
  | DISJ
  | OF
  | INT_TYPE
  | ARRAY_TYPE
  | UNIT_TYPE
  | BOOL_TYPE
  | POL_TYPE of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- prÃ©ambule: ici du code Caml --- *)

open Buildins
open Expr   (* rappel: dans expr.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

let get_error_infos = Parsing.rhs_start_pos 

(* allow us to convert inputted polymorphic type to internal polymorphic types *)
let rec transfo_poly_types tbl t =
    let aux = transfo_poly_types tbl in
    match t with
    | Ref_type x -> Ref_type (aux x)
    | Fun_type (a, b) -> Fun_type (aux a, aux b)
    | Tuple_type l -> Tuple_type (List.map aux l)
    | Called_type (n, t) -> Called_type (n, (List.map aux t))
    | Arg_type x -> Arg_type (aux x)
    | Polymorphic_type s ->
            if Hashtbl.mem tbl s then
                Generic_type (Hashtbl.find tbl s)
            else 
                let u = new_generic_id ()
                in (Hashtbl.add tbl s u;Generic_type u)
    | Constructor_type (n, a, b) ->
            Constructor_type (n, aux a, aux b)
    | Constructor_type_noarg(n, a) ->
            Constructor_type_noarg (n, aux a)
    | _ -> t
let transform_type =
    let tbl = Hashtbl.create 0 
    in transfo_poly_types tbl
(* map the previous functions to all constructors in a type declaration *)
let transfo_typedecl typedecl = 
    match typedecl with
    | TypeDecl (name, what, er) ->
            let tbl = Hashtbl.create 0
            in let what = match what with
            | Constructor_list lst -> Constructor_list (List.map (transfo_poly_types tbl) lst )
            | Basic_type t -> Basic_type (transfo_poly_types tbl t)
            in TypeDecl(transfo_poly_types tbl name, what, er)
    | _ -> typedecl

# 117 "parser.ml"
let yytransl_const = [|
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* BEGIN *);
  263 (* END *);
  264 (* LET *);
  265 (* REC *);
  266 (* IF *);
  267 (* ELSE *);
  268 (* THEN *);
  269 (* IN *);
  270 (* COLON *);
  271 (* COMMA *);
  272 (* FUN *);
  273 (* ARROW *);
  274 (* E *);
  275 (* TRY *);
  276 (* WITH *);
  277 (* PLUS *);
  278 (* TIMES *);
  279 (* MINUS *);
  280 (* EQUAL *);
  281 (* DIV *);
  282 (* ENDEXPR *);
  283 (* REFLET *);
  284 (* REF *);
  285 (* EOL *);
  286 (* RAISE *);
  287 (* BANG *);
  288 (* OR *);
  289 (* AND *);
  290 (* SGT *);
  291 (* GT *);
  292 (* SLT *);
  293 (* LT *);
  294 (* NEQUAL *);
  295 (* NOT *);
  296 (* PRINTIN *);
  297 (* AMAKE *);
  298 (* ARRAYAFFECTATION *);
  299 (* DOT *);
  301 (* UNDERSCORE *);
  302 (* SEQ *);
  303 (* TRUE *);
  304 (* FALSE *);
  305 (* OPEN *);
  306 (* MATCH *);
  307 (* LISTINSERT *);
  308 (* RBRACKET *);
  309 (* LBRACKET *);
  317 (* TYPE *);
  318 (* DISJ *);
  319 (* OF *);
  320 (* INT_TYPE *);
  321 (* ARRAY_TYPE *);
  322 (* UNIT_TYPE *);
  323 (* BOOL_TYPE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
  259 (* FILE_NAME *);
  300 (* CONSTRUCTOR *);
  310 (* INFIX_OP_0 *);
  311 (* INFIX_OP_1 *);
  312 (* INFIX_OP_2 *);
  313 (* INFIX_OP_3 *);
  314 (* INFIX_OP_4 *);
  315 (* INFIX_OP_REF *);
  316 (* PREFIX_OP *);
  324 (* POL_TYPE *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\005\000\005\000\
\007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\010\000\010\000\012\000\012\000\013\000\013\000\011\000\
\011\000\011\000\014\000\015\000\015\000\016\000\016\000\016\000\
\016\000\017\000\017\000\017\000\017\000\017\000\017\000\020\000\
\020\000\021\000\021\000\002\000\002\000\002\000\002\000\002\000\
\002\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\003\000\003\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\023\000\023\000\023\000\018\000\018\000\024\000\024\000\
\025\000\026\000\026\000\026\000\026\000\009\000\027\000\027\000\
\028\000\028\000\028\000\028\000\028\000\028\000\029\000\029\000\
\029\000\030\000\030\000\031\000\031\000\031\000\032\000\032\000\
\033\000\033\000\034\000\034\000\034\000\004\000\004\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\002\000\002\000\002\000\001\000\003\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\002\000\005\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\001\000\002\000\001\000\001\000\003\000\004\000\001\000\005\000\
\002\000\001\000\002\000\001\000\003\000\005\000\003\000\003\000\
\001\000\001\000\002\000\004\000\005\000\005\000\006\000\007\000\
\006\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\002\000\002\000\004\000\003\000\004\000\006\000\003\000\007\000\
\004\000\003\000\002\000\002\000\002\000\002\000\001\000\001\000\
\003\000\003\000\004\000\005\000\007\000\005\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\002\000\002\000\001\000\003\000\003\000\001\000\001\000\002\000\
\004\000\003\000\003\000\001\000\002\000\004\000\003\000\003\000\
\003\000\001\000\001\000\002\000\003\000\004\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\009\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\016\000\010\000\014\000\015\000\000\000\
\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\
\000\000\013\000\042\000\050\000\000\000\000\000\000\000\080\000\
\000\000\011\000\021\000\022\000\023\000\024\000\025\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\033\000\032\000\000\000\
\035\000\000\000\000\000\000\000\012\000\039\000\000\000\000\000\
\068\000\043\000\044\000\000\000\092\000\093\000\081\000\082\000\
\000\000\000\000\017\000\049\000\000\000\094\000\124\000\000\000\
\105\000\000\000\000\000\000\000\004\000\005\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\008\000\000\000\000\000\000\000\087\000\019\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\003\000\000\000\000\000\047\000\000\000\000\000\125\000\
\000\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\119\000\000\000\106\000\108\000\107\000\
\000\000\109\000\000\000\000\000\000\000\118\000\000\000\000\000\
\031\000\000\000\000\000\000\000\029\000\000\000\000\000\037\000\
\000\000\000\000\052\000\000\000\000\000\000\000\083\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\134\000\131\000\000\000\000\000\000\000\000\000\018\000\
\114\000\113\000\000\000\120\000\000\000\000\000\046\000\053\000\
\000\000\000\000\000\000\054\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\127\000\126\000\128\000\000\000\
\132\000\000\000\102\000\117\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\057\000\000\000\040\000\000\000\
\000\000\000\000\000\000\129\000\133\000\122\000\121\000\123\000\
\101\000\056\000\088\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\029\000\050\000\031\000\032\000\033\000\051\000\034\000\035\000\
\185\000\133\000\061\000\062\000\063\000\064\000\065\000\071\000\
\036\000\037\000\038\000\085\000\039\000\040\000\211\000\041\000\
\186\000\187\000\188\000\189\000\190\000\223\000\091\000\151\000\
\219\000\220\000"

let yysindex = "\030\000\
\003\001\000\000\000\000\000\000\064\001\124\001\037\001\124\001\
\003\003\124\001\124\001\000\000\184\005\000\000\124\001\124\001\
\124\001\124\001\124\001\000\000\000\000\000\000\000\000\052\255\
\124\001\158\001\124\001\005\255\000\000\036\255\032\255\040\255\
\043\255\000\000\000\000\000\000\041\255\017\007\184\005\000\000\
\075\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\124\001\109\255\128\255\123\255\022\006\131\255\134\001\059\255\
\128\006\017\006\003\003\000\000\009\255\000\000\000\000\058\255\
\000\000\222\006\099\255\092\255\000\000\000\000\111\006\129\255\
\000\000\000\000\000\000\224\007\000\000\000\000\000\000\000\000\
\122\255\062\007\000\000\000\000\239\254\000\000\000\000\084\255\
\000\000\151\255\132\255\124\001\000\000\000\000\000\000\155\255\
\124\001\124\001\124\001\124\001\124\001\124\001\124\001\124\001\
\124\001\124\001\124\001\124\001\124\001\124\001\124\001\124\001\
\124\001\124\001\124\001\124\001\124\001\124\001\124\001\000\000\
\124\001\000\000\117\255\112\255\124\001\000\000\000\000\123\255\
\164\255\234\001\153\002\000\000\039\255\119\255\053\001\139\006\
\139\006\117\255\124\001\124\001\128\006\116\255\124\001\000\000\
\154\255\000\000\211\000\184\005\000\000\158\255\073\255\000\000\
\127\255\000\000\124\001\185\007\146\007\017\255\120\255\017\255\
\134\007\120\255\146\007\249\007\249\007\134\007\134\007\134\007\
\134\007\134\007\000\000\134\007\134\007\035\007\017\255\120\255\
\120\255\185\007\146\007\000\000\117\255\000\000\000\000\000\000\
\169\255\000\000\232\254\153\255\026\255\000\000\178\255\181\255\
\000\000\124\001\206\002\139\006\000\000\117\255\124\001\000\000\
\119\255\166\255\000\000\174\006\188\255\128\006\000\000\184\005\
\139\006\180\255\138\255\000\000\084\255\200\255\084\255\144\255\
\167\255\000\000\000\000\148\255\067\006\074\255\115\255\000\000\
\000\000\000\000\117\255\000\000\117\255\124\001\000\000\000\000\
\124\001\119\255\189\255\000\000\124\001\124\001\000\000\208\255\
\201\255\206\255\124\001\139\006\000\000\000\000\000\000\117\255\
\000\000\167\255\000\000\000\000\117\255\222\255\117\255\026\255\
\209\255\112\006\000\000\124\001\000\000\107\007\000\000\124\001\
\124\001\107\007\212\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\107\007\124\001\107\007"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\173\000\189\005\249\001\000\000\
\049\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\225\255\000\000\000\000\194\001\000\000\000\000\000\000\000\000\
\113\005\000\000\033\255\000\000\203\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\114\000\000\000\000\000\000\000\003\255\
\000\000\000\000\000\000\000\000\000\000\080\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\005\231\000\061\003\105\002\098\003\
\209\003\158\002\109\005\249\004\016\005\246\003\027\004\064\004\
\101\004\138\004\000\000\175\004\212\004\172\003\135\003\211\002\
\008\003\086\005\131\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\172\255\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\247\006\000\000\000\000\201\005\000\000\000\000\000\000\000\000\
\000\000\000\000\233\005\000\000\000\000\000\000\000\000\008\255\
\000\000\000\000\000\000\205\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\090\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\005\
\235\255\000\000\000\000\000\000\000\000\025\255\000\000\000\000\
\000\000\149\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\005\000\000\171\005"

let yygindex = "\000\000\
\000\000\234\000\015\000\000\000\108\000\000\000\000\000\010\000\
\023\000\000\000\199\255\000\000\249\255\227\255\096\000\202\255\
\014\000\020\000\251\255\000\000\000\000\000\000\000\000\000\000\
\244\255\000\000\000\000\152\255\000\000\000\000\000\000\000\000\
\062\255\000\000"

let yytablesize = 2355
let yytable = "\053\000\
\134\000\070\000\066\000\225\000\135\000\073\000\087\000\030\000\
\088\000\076\000\077\000\078\000\079\000\080\000\052\000\090\000\
\060\000\030\000\060\000\082\000\054\000\086\000\249\000\136\000\
\072\000\129\000\074\000\228\000\148\000\086\000\001\000\086\000\
\075\000\130\000\149\000\086\000\086\000\086\000\100\000\084\000\
\226\000\103\000\229\000\086\000\086\000\075\000\012\000\012\000\
\092\000\132\000\086\000\070\000\120\000\030\000\081\000\013\001\
\012\000\094\000\075\000\137\000\004\000\093\000\130\000\144\000\
\128\000\095\000\060\000\060\000\060\000\130\000\086\000\138\000\
\089\000\117\000\118\000\150\000\195\000\214\000\252\000\201\000\
\060\000\139\000\097\000\012\000\196\000\096\000\086\000\215\000\
\253\000\121\000\197\000\156\000\157\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\154\000\172\000\173\000\174\000\175\000\176\000\
\177\000\178\000\059\000\179\000\069\000\210\000\180\000\254\000\
\181\000\092\000\000\001\070\000\001\001\027\000\171\000\144\000\
\180\000\255\000\181\000\027\000\122\000\205\000\204\000\026\000\
\123\000\126\000\234\000\192\000\060\000\026\000\141\000\083\000\
\060\000\060\000\060\000\146\000\145\000\221\000\060\000\089\000\
\152\000\203\000\191\000\153\000\060\000\207\000\155\000\206\000\
\202\000\212\000\069\000\131\000\069\000\069\000\069\000\075\000\
\193\000\137\000\216\000\208\000\213\000\224\000\227\000\218\000\
\110\000\118\000\069\000\242\000\182\000\230\000\183\000\184\000\
\089\000\231\000\110\000\144\000\217\000\237\000\182\000\239\000\
\183\000\184\000\089\000\110\000\243\000\110\000\240\000\244\000\
\245\000\246\000\247\000\222\000\060\000\060\000\248\000\036\000\
\232\000\250\000\216\000\007\001\004\001\236\000\011\001\060\000\
\036\000\008\001\060\000\036\000\235\000\241\000\009\001\015\001\
\002\001\229\000\036\000\075\000\021\001\019\000\135\000\200\000\
\006\001\110\000\030\000\000\000\116\000\010\001\069\000\116\000\
\000\000\000\000\069\000\069\000\069\000\000\000\000\000\003\001\
\069\000\116\000\000\000\005\001\000\000\060\000\069\000\000\000\
\116\000\000\000\116\000\020\001\116\000\000\000\000\000\111\000\
\000\000\000\000\115\000\000\000\000\000\115\000\012\001\022\001\
\000\000\111\000\018\001\014\001\000\000\016\001\019\001\115\000\
\111\000\115\000\111\000\000\000\111\000\000\000\115\000\000\000\
\115\000\000\000\115\000\000\000\000\000\000\000\000\000\000\000\
\116\000\000\000\000\000\000\000\000\000\000\000\069\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\012\000\069\000\012\000\012\000\069\000\012\000\000\000\000\000\
\111\000\012\000\012\000\012\000\012\000\012\000\115\000\012\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\000\000\069\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\045\000\045\000\012\000\045\000\045\000\000\000\
\045\000\000\000\000\000\000\000\045\000\045\000\045\000\000\000\
\045\000\000\000\045\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\044\000\044\000\045\000\
\044\000\044\000\000\000\044\000\000\000\000\000\000\000\044\000\
\044\000\044\000\000\000\044\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\003\000\004\000\000\000\055\000\000\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\044\000\103\000\000\000\103\000\000\000\000\000\
\000\000\103\000\103\000\103\000\000\000\103\000\000\000\000\000\
\000\000\000\000\103\000\000\000\000\000\000\000\057\000\021\000\
\103\000\022\000\023\000\003\000\004\000\000\000\005\000\058\000\
\006\000\000\000\007\000\000\000\008\000\000\000\000\000\000\000\
\209\000\000\000\009\000\000\000\103\000\010\000\000\000\000\000\
\000\000\011\000\000\000\000\000\012\000\000\000\013\000\014\000\
\015\000\016\000\000\000\000\000\103\000\003\000\004\000\000\000\
\055\000\017\000\018\000\019\000\000\000\056\000\020\000\021\000\
\000\000\022\000\023\000\024\000\025\000\003\000\004\000\026\000\
\055\000\142\000\000\000\000\000\000\000\000\000\027\000\028\000\
\003\000\004\000\198\000\005\000\042\000\006\000\000\000\007\000\
\000\000\008\000\000\000\000\000\199\000\000\000\000\000\009\000\
\057\000\021\000\010\000\022\000\023\000\000\000\011\000\000\000\
\000\000\058\000\000\000\013\000\000\000\015\000\016\000\000\000\
\020\000\021\000\000\000\022\000\023\000\000\000\017\000\018\000\
\019\000\068\000\000\000\020\000\021\000\000\000\022\000\023\000\
\000\000\025\000\000\000\000\000\026\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\003\000\004\000\000\000\005\000\
\000\000\006\000\000\000\007\000\000\000\008\000\003\000\004\000\
\000\000\055\000\042\000\009\000\000\000\000\000\010\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\013\000\
\000\000\015\000\016\000\000\000\000\000\000\000\003\000\004\000\
\000\000\005\000\017\000\018\000\019\000\000\000\000\000\020\000\
\021\000\000\000\022\000\023\000\000\000\025\000\000\000\000\000\
\026\000\057\000\021\000\000\000\022\000\023\000\000\000\027\000\
\000\000\013\000\058\000\043\000\044\000\045\000\046\000\047\000\
\048\000\127\000\042\000\042\000\000\000\042\000\042\000\000\000\
\000\000\020\000\021\000\000\000\022\000\023\000\000\000\000\000\
\042\000\083\000\026\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\095\000\000\000\095\000\
\000\000\000\000\000\000\095\000\095\000\095\000\000\000\095\000\
\000\000\000\000\000\000\000\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\000\000\000\000\000\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\043\000\
\044\000\045\000\046\000\047\000\048\000\127\000\095\000\000\000\
\000\000\000\000\000\000\095\000\000\000\000\000\095\000\095\000\
\095\000\095\000\095\000\095\000\000\000\096\000\095\000\096\000\
\000\000\000\000\000\000\096\000\096\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\000\000\000\000\000\000\000\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\000\000\000\000\096\000\000\000\000\000\096\000\096\000\
\096\000\096\000\096\000\096\000\000\000\059\000\096\000\059\000\
\000\000\000\000\000\000\059\000\059\000\059\000\000\000\059\000\
\000\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\003\000\004\000\059\000\055\000\067\000\059\000\059\000\
\059\000\059\000\060\000\059\000\060\000\000\000\059\000\000\000\
\060\000\060\000\060\000\000\000\060\000\000\000\000\000\000\000\
\194\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\000\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\020\000\021\000\000\000\022\000\
\023\000\000\000\000\000\060\000\000\000\068\000\003\000\004\000\
\060\000\055\000\142\000\060\000\060\000\060\000\060\000\072\000\
\060\000\072\000\000\000\060\000\000\000\072\000\072\000\072\000\
\000\000\072\000\000\000\000\000\000\000\233\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\020\000\021\000\000\000\022\000\023\000\000\000\000\000\
\072\000\000\000\068\000\003\000\004\000\072\000\055\000\067\000\
\072\000\072\000\072\000\072\000\071\000\072\000\071\000\000\000\
\072\000\000\000\071\000\071\000\071\000\000\000\071\000\000\000\
\000\000\000\000\000\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\000\000\000\000\000\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\020\000\021\000\
\000\000\022\000\023\000\000\000\000\000\071\000\000\000\068\000\
\000\000\000\000\071\000\000\000\000\000\071\000\071\000\071\000\
\071\000\058\000\071\000\058\000\000\000\071\000\000\000\058\000\
\058\000\058\000\000\000\058\000\000\000\000\000\000\000\000\000\
\058\000\058\000\000\000\058\000\058\000\000\000\058\000\058\000\
\000\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\000\000\061\000\000\000\
\061\000\000\000\058\000\000\000\061\000\061\000\061\000\058\000\
\061\000\000\000\058\000\058\000\058\000\061\000\061\000\058\000\
\061\000\061\000\058\000\061\000\061\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\000\000\000\000\000\000\074\000\000\000\074\000\000\000\061\000\
\000\000\074\000\074\000\074\000\061\000\074\000\000\000\061\000\
\061\000\061\000\074\000\074\000\061\000\074\000\074\000\061\000\
\074\000\074\000\000\000\000\000\000\000\000\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\000\000\000\000\
\075\000\000\000\075\000\000\000\074\000\000\000\075\000\075\000\
\075\000\074\000\075\000\000\000\074\000\074\000\074\000\075\000\
\000\000\074\000\000\000\075\000\074\000\075\000\075\000\000\000\
\000\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\000\000\000\000\070\000\000\000\070\000\
\000\000\075\000\000\000\070\000\070\000\070\000\075\000\070\000\
\000\000\075\000\000\000\000\000\070\000\000\000\075\000\000\000\
\070\000\075\000\070\000\070\000\000\000\000\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\000\000\066\000\000\000\066\000\000\000\070\000\000\000\
\066\000\066\000\066\000\000\000\066\000\000\000\070\000\000\000\
\000\000\066\000\000\000\070\000\000\000\066\000\070\000\066\000\
\066\000\000\000\000\000\000\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\066\000\000\000\067\000\067\000\067\000\
\000\000\067\000\000\000\066\000\000\000\000\000\067\000\000\000\
\066\000\000\000\067\000\066\000\067\000\067\000\000\000\000\000\
\000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\064\000\000\000\064\000\000\000\
\067\000\000\000\064\000\064\000\064\000\000\000\064\000\000\000\
\067\000\000\000\000\000\064\000\000\000\067\000\000\000\064\000\
\067\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\000\000\
\000\000\065\000\000\000\065\000\000\000\064\000\000\000\065\000\
\065\000\065\000\000\000\065\000\000\000\064\000\000\000\000\000\
\065\000\000\000\064\000\000\000\065\000\064\000\065\000\065\000\
\000\000\000\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\000\000\000\000\000\000\069\000\000\000\
\069\000\000\000\065\000\000\000\069\000\069\000\069\000\000\000\
\069\000\000\000\065\000\000\000\000\000\069\000\000\000\065\000\
\000\000\069\000\065\000\069\000\069\000\000\000\000\000\000\000\
\000\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\000\000\000\000\077\000\000\000\077\000\000\000\069\000\
\000\000\077\000\077\000\077\000\000\000\077\000\000\000\069\000\
\000\000\000\000\077\000\000\000\069\000\000\000\077\000\069\000\
\077\000\077\000\000\000\000\000\000\000\000\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\000\000\000\000\000\000\
\076\000\000\000\076\000\000\000\077\000\000\000\076\000\076\000\
\076\000\000\000\076\000\000\000\077\000\000\000\000\000\076\000\
\000\000\077\000\000\000\076\000\077\000\076\000\076\000\000\000\
\000\000\000\000\000\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\000\000\000\000\062\000\000\000\062\000\
\000\000\076\000\000\000\062\000\062\000\062\000\000\000\062\000\
\000\000\076\000\000\000\000\000\062\000\000\000\076\000\000\000\
\000\000\076\000\062\000\062\000\063\000\000\000\063\000\000\000\
\062\000\062\000\063\000\063\000\063\000\000\000\063\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\062\000\000\000\
\000\000\063\000\063\000\000\000\000\000\112\000\000\000\063\000\
\063\000\000\000\091\000\062\000\091\000\000\000\062\000\112\000\
\091\000\091\000\091\000\000\000\091\000\063\000\112\000\000\000\
\112\000\091\000\112\000\000\000\000\000\000\000\000\000\091\000\
\091\000\097\000\063\000\097\000\000\000\063\000\000\000\097\000\
\097\000\097\000\000\000\097\000\000\000\000\000\000\000\000\000\
\097\000\000\000\073\000\091\000\073\000\000\000\097\000\097\000\
\073\000\073\000\073\000\000\000\073\000\000\000\112\000\000\000\
\091\000\073\000\000\000\091\000\000\000\000\000\000\000\073\000\
\073\000\090\000\097\000\090\000\000\000\016\000\000\000\090\000\
\090\000\090\000\000\000\090\000\000\000\000\000\016\000\016\000\
\090\000\016\000\097\000\073\000\000\000\000\000\090\000\104\000\
\016\000\104\000\000\000\000\000\000\000\104\000\104\000\104\000\
\000\000\104\000\000\000\073\000\000\000\000\000\104\000\000\000\
\000\000\098\000\090\000\098\000\104\000\000\000\016\000\098\000\
\098\000\098\000\000\000\016\000\016\000\099\000\000\000\099\000\
\098\000\000\000\090\000\099\000\099\000\099\000\098\000\100\000\
\104\000\100\000\000\000\000\000\099\000\100\000\100\000\100\000\
\003\000\004\000\099\000\005\000\000\000\000\000\100\000\000\000\
\104\000\078\000\098\000\078\000\100\000\000\000\000\000\078\000\
\078\000\078\000\000\000\000\000\000\000\085\000\099\000\085\000\
\078\000\000\000\098\000\013\000\085\000\085\000\078\000\000\000\
\100\000\000\000\000\000\000\000\085\000\000\000\099\000\000\000\
\000\000\000\000\085\000\020\000\021\000\000\000\022\000\023\000\
\100\000\000\000\000\000\000\000\026\000\089\000\000\000\089\000\
\000\000\000\000\000\000\089\000\089\000\089\000\085\000\089\000\
\000\000\000\000\078\000\000\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\000\000\000\000\085\000\000\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\000\000\
\000\000\003\000\004\000\000\000\055\000\000\000\089\000\000\000\
\000\000\000\000\124\000\089\000\000\000\000\000\089\000\089\000\
\089\000\089\000\089\000\089\000\098\000\000\000\000\000\000\000\
\000\000\000\000\099\000\100\000\101\000\102\000\103\000\000\000\
\104\000\000\000\000\000\000\000\000\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\057\000\021\000\000\000\022\000\
\023\000\000\000\000\000\125\000\083\000\058\000\000\000\251\000\
\113\000\000\000\000\000\114\000\115\000\116\000\117\000\118\000\
\119\000\098\000\000\000\000\000\000\000\000\000\000\000\099\000\
\100\000\101\000\102\000\103\000\000\000\104\000\000\000\000\000\
\000\000\000\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\004\000\000\000\055\000\142\000\017\001\113\000\000\000\000\000\
\114\000\115\000\116\000\117\000\118\000\119\000\098\000\143\000\
\003\000\004\000\000\000\055\000\099\000\100\000\101\000\102\000\
\103\000\000\000\104\000\003\000\004\000\000\000\055\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\000\000\000\000\
\000\000\000\000\020\000\021\000\000\000\022\000\023\000\000\000\
\000\000\000\000\113\000\068\000\000\000\114\000\115\000\116\000\
\117\000\118\000\119\000\020\000\021\000\000\000\022\000\023\000\
\000\000\000\000\000\000\000\000\068\000\000\000\057\000\021\000\
\238\000\022\000\023\000\000\000\098\000\000\000\000\000\058\000\
\000\000\000\000\099\000\100\000\101\000\102\000\103\000\000\000\
\104\000\000\000\000\000\000\000\000\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\113\000\000\000\000\000\114\000\115\000\116\000\117\000\118\000\
\119\000\140\000\000\000\000\000\098\000\000\000\000\000\000\000\
\000\000\000\000\099\000\100\000\101\000\102\000\103\000\000\000\
\104\000\000\000\000\000\028\000\000\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\028\000\028\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\113\000\000\000\000\000\114\000\115\000\116\000\117\000\118\000\
\119\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\000\000\000\000\000\000\000\000\028\000\099\000\100\000\101\000\
\102\000\103\000\028\000\104\000\000\000\000\000\000\000\000\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\099\000\
\100\000\101\000\000\000\103\000\000\000\000\000\112\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\114\000\115\000\
\116\000\117\000\118\000\119\000\098\000\000\000\000\000\000\000\
\000\000\147\000\099\000\100\000\101\000\102\000\103\000\000\000\
\104\000\115\000\116\000\117\000\118\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\113\000\000\000\000\000\114\000\115\000\116\000\117\000\118\000\
\119\000\098\000\000\000\000\000\000\000\000\000\000\000\099\000\
\100\000\101\000\102\000\103\000\000\000\104\000\000\000\000\000\
\000\000\000\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\100\000\101\000\113\000\103\000\000\000\
\114\000\115\000\116\000\117\000\118\000\119\000\099\000\100\000\
\101\000\102\000\103\000\000\000\104\000\000\000\000\000\000\000\
\000\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\113\000\000\000\000\000\000\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\113\000\000\000\000\000\114\000\
\115\000\116\000\117\000\118\000\119\000\099\000\100\000\101\000\
\102\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\114\000\115\000\
\116\000\117\000\118\000\119\000\099\000\100\000\101\000\102\000\
\103\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\100\000\101\000\
\102\000\103\000\113\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\107\000\108\000\109\000\110\000\111\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\114\000\115\000\
\116\000\117\000\118\000"

let yycheck = "\005\000\
\058\000\009\000\008\000\028\001\059\000\011\000\002\001\005\001\
\004\001\015\000\016\000\017\000\018\000\019\000\005\000\028\000\
\007\000\015\001\009\000\025\000\006\000\027\000\217\000\015\001\
\010\000\055\000\013\000\002\001\046\001\005\001\001\000\007\001\
\013\000\026\001\052\001\011\001\012\001\013\001\022\001\026\000\
\065\001\025\001\017\001\049\000\020\001\026\000\014\001\015\001\
\013\001\057\000\026\001\059\000\039\000\051\001\003\001\250\000\
\024\001\026\001\039\000\051\001\002\001\026\001\004\001\071\000\
\055\000\026\001\057\000\058\000\059\000\062\001\046\001\014\001\
\068\001\057\001\058\001\088\000\131\000\005\001\005\001\137\000\
\071\000\024\001\042\001\051\001\046\001\043\001\062\001\015\001\
\015\001\015\001\052\001\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\092\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\007\000\121\000\009\000\147\000\002\001\005\001\
\004\001\013\001\227\000\131\000\229\000\046\001\112\000\135\000\
\002\001\015\001\004\001\052\001\005\001\141\000\140\000\046\001\
\014\001\007\001\196\000\125\000\131\000\052\001\044\001\052\001\
\135\000\136\000\137\000\026\001\020\001\155\000\141\000\068\001\
\002\001\139\000\043\001\024\001\147\000\143\000\004\001\044\001\
\138\000\148\000\055\000\056\000\057\000\058\000\059\000\148\000\
\005\001\051\001\044\001\018\001\015\001\005\001\022\001\153\000\
\005\001\058\001\071\000\209\000\064\001\004\001\066\001\067\001\
\068\001\005\001\015\001\195\000\062\001\024\001\064\001\004\001\
\066\001\067\001\068\001\024\001\017\001\026\001\206\000\062\001\
\213\000\002\001\215\000\181\000\195\000\196\000\063\001\005\001\
\194\000\062\001\044\001\004\001\024\001\199\000\244\000\206\000\
\014\001\017\001\209\000\017\001\198\000\208\000\017\001\002\001\
\230\000\017\001\024\001\208\000\017\001\005\001\026\001\136\000\
\238\000\062\001\001\000\255\255\002\001\243\000\131\000\005\001\
\255\255\255\255\135\000\136\000\137\000\255\255\255\255\233\000\
\141\000\015\001\255\255\237\000\255\255\244\000\147\000\255\255\
\022\001\255\255\024\001\009\001\026\001\255\255\255\255\005\001\
\255\255\255\255\002\001\255\255\255\255\005\001\248\000\021\001\
\255\255\015\001\004\001\253\000\255\255\255\000\008\001\015\001\
\022\001\017\001\024\001\255\255\026\001\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\255\255\255\255\255\255\255\255\195\000\196\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\206\000\004\001\005\001\209\000\007\001\255\255\255\255\
\062\001\011\001\012\001\013\001\014\001\015\001\062\001\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\244\000\
\255\255\255\255\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\001\001\002\001\062\001\004\001\005\001\255\255\
\007\001\255\255\255\255\255\255\011\001\012\001\013\001\255\255\
\015\001\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\255\255\255\255\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\001\001\002\001\062\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\001\001\002\001\255\255\004\001\255\255\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\255\255\255\255\062\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\044\001\045\001\
\026\001\047\001\048\001\001\001\002\001\255\255\004\001\053\001\
\006\001\255\255\008\001\255\255\010\001\255\255\255\255\255\255\
\062\001\255\255\016\001\255\255\046\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\029\001\
\030\001\031\001\255\255\255\255\062\001\001\001\002\001\255\255\
\004\001\039\001\040\001\041\001\255\255\009\001\044\001\045\001\
\255\255\047\001\048\001\049\001\050\001\001\001\002\001\053\001\
\004\001\005\001\255\255\255\255\255\255\255\255\060\001\061\001\
\001\001\002\001\014\001\004\001\005\001\006\001\255\255\008\001\
\255\255\010\001\255\255\255\255\024\001\255\255\255\255\016\001\
\044\001\045\001\019\001\047\001\048\001\255\255\023\001\255\255\
\255\255\053\001\255\255\028\001\255\255\030\001\031\001\255\255\
\044\001\045\001\255\255\047\001\048\001\255\255\039\001\040\001\
\041\001\053\001\255\255\044\001\045\001\255\255\047\001\048\001\
\255\255\050\001\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\001\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\001\001\002\001\
\255\255\004\001\005\001\016\001\255\255\255\255\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\001\001\002\001\
\255\255\004\001\039\001\040\001\041\001\255\255\255\255\044\001\
\045\001\255\255\047\001\048\001\255\255\050\001\255\255\255\255\
\053\001\044\001\045\001\255\255\047\001\048\001\255\255\060\001\
\255\255\028\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\255\255\004\001\005\001\255\255\
\255\255\044\001\045\001\255\255\047\001\048\001\255\255\255\255\
\015\001\052\001\053\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\255\255\255\255\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\046\001\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\255\255\005\001\062\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\255\255\005\001\062\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\255\255\001\001\002\001\051\001\004\001\005\001\054\001\055\001\
\056\001\057\001\005\001\059\001\007\001\255\255\062\001\255\255\
\011\001\012\001\013\001\255\255\015\001\255\255\255\255\255\255\
\024\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\044\001\045\001\255\255\047\001\
\048\001\255\255\255\255\046\001\255\255\053\001\001\001\002\001\
\051\001\004\001\005\001\054\001\055\001\056\001\057\001\005\001\
\059\001\007\001\255\255\062\001\255\255\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\024\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\044\001\045\001\255\255\047\001\048\001\255\255\255\255\
\046\001\255\255\053\001\001\001\002\001\051\001\004\001\005\001\
\054\001\055\001\056\001\057\001\005\001\059\001\007\001\255\255\
\062\001\255\255\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\044\001\045\001\
\255\255\047\001\048\001\255\255\255\255\046\001\255\255\053\001\
\255\255\255\255\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001\005\001\059\001\007\001\255\255\062\001\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\023\001\024\001\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\255\255\005\001\255\255\
\007\001\255\255\046\001\255\255\011\001\012\001\013\001\051\001\
\015\001\255\255\054\001\055\001\056\001\020\001\021\001\059\001\
\023\001\024\001\062\001\026\001\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\005\001\255\255\007\001\255\255\046\001\
\255\255\011\001\012\001\013\001\051\001\015\001\255\255\054\001\
\055\001\056\001\020\001\021\001\059\001\023\001\024\001\062\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\255\255\
\005\001\255\255\007\001\255\255\046\001\255\255\011\001\012\001\
\013\001\051\001\015\001\255\255\054\001\055\001\056\001\020\001\
\255\255\059\001\255\255\024\001\062\001\026\001\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\255\255\255\255\005\001\255\255\007\001\
\255\255\046\001\255\255\011\001\012\001\013\001\051\001\015\001\
\255\255\054\001\255\255\255\255\020\001\255\255\059\001\255\255\
\024\001\062\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\005\001\255\255\007\001\255\255\046\001\255\255\
\011\001\012\001\013\001\255\255\015\001\255\255\054\001\255\255\
\255\255\020\001\255\255\059\001\255\255\024\001\062\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\255\255\255\255\005\001\
\255\255\007\001\255\255\046\001\255\255\011\001\012\001\013\001\
\255\255\015\001\255\255\054\001\255\255\255\255\020\001\255\255\
\059\001\255\255\024\001\062\001\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\005\001\255\255\007\001\255\255\
\046\001\255\255\011\001\012\001\013\001\255\255\015\001\255\255\
\054\001\255\255\255\255\020\001\255\255\059\001\255\255\024\001\
\062\001\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\005\001\255\255\007\001\255\255\046\001\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\054\001\255\255\255\255\
\020\001\255\255\059\001\255\255\024\001\062\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\255\255\005\001\255\255\
\007\001\255\255\046\001\255\255\011\001\012\001\013\001\255\255\
\015\001\255\255\054\001\255\255\255\255\020\001\255\255\059\001\
\255\255\024\001\062\001\026\001\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\005\001\255\255\007\001\255\255\046\001\
\255\255\011\001\012\001\013\001\255\255\015\001\255\255\054\001\
\255\255\255\255\020\001\255\255\059\001\255\255\024\001\062\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\255\255\
\005\001\255\255\007\001\255\255\046\001\255\255\011\001\012\001\
\013\001\255\255\015\001\255\255\054\001\255\255\255\255\020\001\
\255\255\059\001\255\255\024\001\062\001\026\001\027\001\255\255\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\255\255\255\255\005\001\255\255\007\001\
\255\255\046\001\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\054\001\255\255\255\255\020\001\255\255\059\001\255\255\
\255\255\062\001\026\001\027\001\005\001\255\255\007\001\255\255\
\032\001\033\001\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\046\001\255\255\
\255\255\026\001\027\001\255\255\255\255\005\001\255\255\032\001\
\033\001\255\255\005\001\059\001\007\001\255\255\062\001\015\001\
\011\001\012\001\013\001\255\255\015\001\046\001\022\001\255\255\
\024\001\020\001\026\001\255\255\255\255\255\255\255\255\026\001\
\027\001\005\001\059\001\007\001\255\255\062\001\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\005\001\046\001\007\001\255\255\026\001\027\001\
\011\001\012\001\013\001\255\255\015\001\255\255\062\001\255\255\
\059\001\020\001\255\255\062\001\255\255\255\255\255\255\026\001\
\027\001\005\001\046\001\007\001\255\255\005\001\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\014\001\015\001\
\020\001\017\001\062\001\046\001\255\255\255\255\026\001\005\001\
\024\001\007\001\255\255\255\255\255\255\011\001\012\001\013\001\
\255\255\015\001\255\255\062\001\255\255\255\255\020\001\255\255\
\255\255\005\001\046\001\007\001\026\001\255\255\046\001\011\001\
\012\001\013\001\255\255\051\001\052\001\005\001\255\255\007\001\
\020\001\255\255\062\001\011\001\012\001\013\001\026\001\005\001\
\046\001\007\001\255\255\255\255\020\001\011\001\012\001\013\001\
\001\001\002\001\026\001\004\001\255\255\255\255\020\001\255\255\
\062\001\005\001\046\001\007\001\026\001\255\255\255\255\011\001\
\012\001\013\001\255\255\255\255\255\255\005\001\046\001\007\001\
\020\001\255\255\062\001\028\001\012\001\013\001\026\001\255\255\
\046\001\255\255\255\255\255\255\020\001\255\255\062\001\255\255\
\255\255\255\255\026\001\044\001\045\001\255\255\047\001\048\001\
\062\001\255\255\255\255\255\255\053\001\005\001\255\255\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\046\001\015\001\
\255\255\255\255\062\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\062\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\001\001\002\001\255\255\004\001\255\255\046\001\255\255\
\255\255\255\255\005\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\015\001\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\044\001\045\001\255\255\047\001\
\048\001\255\255\255\255\046\001\052\001\053\001\255\255\005\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\015\001\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\004\001\005\001\005\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\015\001\017\001\
\001\001\002\001\255\255\004\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\001\001\002\001\255\255\004\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\255\255\044\001\045\001\255\255\047\001\048\001\255\255\
\255\255\255\255\051\001\053\001\255\255\054\001\055\001\056\001\
\057\001\058\001\059\001\044\001\045\001\255\255\047\001\048\001\
\255\255\255\255\255\255\255\255\053\001\255\255\044\001\045\001\
\011\001\047\001\048\001\255\255\015\001\255\255\255\255\053\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\012\001\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\005\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\046\001\021\001\022\001\023\001\
\024\001\025\001\052\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\021\001\
\022\001\023\001\255\255\025\001\255\255\255\255\046\001\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\015\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\055\001\056\001\057\001\058\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\058\001\
\059\001\015\001\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\051\001\025\001\255\255\
\054\001\055\001\056\001\057\001\058\001\059\001\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\051\001\255\255\255\255\255\255\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\051\001\255\255\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001\058\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  BEGIN\000\
  END\000\
  LET\000\
  REC\000\
  IF\000\
  ELSE\000\
  THEN\000\
  IN\000\
  COLON\000\
  COMMA\000\
  FUN\000\
  ARROW\000\
  E\000\
  TRY\000\
  WITH\000\
  PLUS\000\
  TIMES\000\
  MINUS\000\
  EQUAL\000\
  DIV\000\
  ENDEXPR\000\
  REFLET\000\
  REF\000\
  EOL\000\
  RAISE\000\
  BANG\000\
  OR\000\
  AND\000\
  SGT\000\
  GT\000\
  SLT\000\
  LT\000\
  NEQUAL\000\
  NOT\000\
  PRINTIN\000\
  AMAKE\000\
  ARRAYAFFECTATION\000\
  DOT\000\
  UNDERSCORE\000\
  SEQ\000\
  TRUE\000\
  FALSE\000\
  OPEN\000\
  MATCH\000\
  LISTINSERT\000\
  RBRACKET\000\
  LBRACKET\000\
  TYPE\000\
  DISJ\000\
  OF\000\
  INT_TYPE\000\
  ARRAY_TYPE\000\
  UNIT_TYPE\000\
  BOOL_TYPE\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  FILE_NAME\000\
  CONSTRUCTOR\000\
  INFIX_OP_0\000\
  INFIX_OP_1\000\
  INFIX_OP_2\000\
  INFIX_OP_3\000\
  INFIX_OP_4\000\
  INFIX_OP_REF\000\
  PREFIX_OP\000\
  POL_TYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
        (Eol)
# 1030 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
        (Eol)
# 1036 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 146 "parser.mly"
        (Open(_2, get_error_infos 1))
# 1043 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'let_defs) in
    Obj.repr(
# 148 "parser.mly"
        (_1)
# 1050 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_list) in
    Obj.repr(
# 150 "parser.mly"
        ( _1 )
# 1057 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_declaration) in
    Obj.repr(
# 152 "parser.mly"
        ( _1 )
# 1064 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 159 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1071 "parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'operators_name) in
    Obj.repr(
# 161 "parser.mly"
        (_2)
# 1078 "parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 165 "parser.mly"
        ( Const _1 )
# 1085 "parser.ml"
               : 'int_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "parser.mly"
        ( Underscore )
# 1091 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "parser.mly"
        ( Unit )
# 1097 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 173 "parser.mly"
        (_1)
# 1104 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'int_atom) in
    Obj.repr(
# 175 "parser.mly"
        ( _1 )
# 1111 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
        (Bool true)
# 1117 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
        (Bool false)
# 1123 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
        ( Constructor_noarg(_1, get_error_infos 1) )
# 1130 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
        (Constructor_noarg(list_none, get_error_infos 1))
# 1136 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'atoms) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'types_tuple) in
    Obj.repr(
# 185 "parser.mly"
        ( FixedType(_2, transform_type _4, get_error_infos 3))
# 1144 "parser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 190 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1151 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 192 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1158 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1165 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 196 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1172 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1179 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 200 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1186 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 202 "parser.mly"
        (Ident(_1, get_error_infos 1))
# 1193 "parser.ml"
               : 'operators_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_list_expr_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_with_constr) in
    Obj.repr(
# 211 "parser.mly"
        ((_3, get_error_infos 3)::_1)
# 1201 "parser.ml"
               : 'pattern_list_expr_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_with_constr) in
    Obj.repr(
# 212 "parser.mly"
                                  ( [_1, get_error_infos 1] )
# 1208 "parser.ml"
               : 'pattern_list_expr_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_with_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_with_constr) in
    Obj.repr(
# 215 "parser.mly"
        (Constructor(list_elt, Tuple([_1; _3], get_error_infos 2), get_error_infos 3))
# 1216 "parser.ml"
               : 'pattern_list_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_list_expr_decl) in
    Obj.repr(
# 217 "parser.mly"
    (List.fold_left (fun a (b, error) ->
        Constructor(list_elt, Tuple([b; a], error), error)
    ) (Constructor_noarg(list_none, get_error_infos 1)) _2
    )
# 1226 "parser.ml"
               : 'pattern_list_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atoms) in
    Obj.repr(
# 225 "parser.mly"
        ( _1 )
# 1233 "parser.ml"
               : 'pattern_without_constr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_tuple) in
    Obj.repr(
# 227 "parser.mly"
        ( _2 )
# 1240 "parser.ml"
               : 'pattern_without_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_without_constr) in
    Obj.repr(
# 230 "parser.mly"
        ( _1 )
# 1247 "parser.ml"
               : 'pattern_with_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_list_expr) in
    Obj.repr(
# 232 "parser.mly"
    (_1)
# 1254 "parser.ml"
               : 'pattern_with_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_without_constr) in
    Obj.repr(
# 234 "parser.mly"
        ( Constructor(_1, _2, get_error_infos 1) )
# 1262 "parser.ml"
               : 'pattern_with_constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_tuple_aux) in
    Obj.repr(
# 238 "parser.mly"
        (match _1 with
        | [x] -> x
        | l -> Tuple (l, get_error_infos 1))
# 1271 "parser.ml"
               : 'pattern_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_with_constr) in
    Obj.repr(
# 243 "parser.mly"
        ([_1])
# 1278 "parser.ml"
               : 'pattern_tuple_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_with_constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_tuple_aux) in
    Obj.repr(
# 245 "parser.mly"
        (_1 :: _3)
# 1286 "parser.ml"
               : 'pattern_tuple_aux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_without_constr) in
    Obj.repr(
# 251 "parser.mly"
        ( [(Constructor(_2, _3, get_error_infos 2), get_error_infos 1)] )
# 1294 "parser.ml"
               : 'fun_args_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_without_constr) in
    Obj.repr(
# 253 "parser.mly"
        ( [(_1, get_error_infos 1)] )
# 1301 "parser.ml"
               : 'fun_args_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fun_args_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_without_constr) in
    Obj.repr(
# 255 "parser.mly"
        ( (Constructor(_3, _4, get_error_infos 3), get_error_infos 3) :: _1 )
# 1310 "parser.ml"
               : 'fun_args_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_args_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_without_constr) in
    Obj.repr(
# 257 "parser.mly"
        ( (_2, get_error_infos 2) :: _1 )
# 1318 "parser.ml"
               : 'fun_args_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atoms) in
    Obj.repr(
# 263 "parser.mly"
        ( _1 )
# 1325 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_atom) in
    Obj.repr(
# 265 "parser.mly"
        (Ref (_2, get_error_infos 1))
# 1332 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 267 "parser.mly"
        ( _1 )
# 1339 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 269 "parser.mly"
       ( _2 )
# 1346 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prog) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_list) in
    Obj.repr(
# 271 "parser.mly"
       ( Seq(_2, _4, get_error_infos 3) )
# 1354 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_expr_decl) in
    Obj.repr(
# 274 "parser.mly"
    (List.fold_left (fun a (b, error) ->
        Constructor(list_elt, Tuple([b; a], error), error)
    ) (Constructor_noarg(list_none, get_error_infos 1)) _2
    
    )
# 1365 "parser.ml"
               : 'expr_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list_expr_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_atom) in
    Obj.repr(
# 283 "parser.mly"
        ((_3, get_error_infos 3)::_1)
# 1373 "parser.ml"
               : 'list_expr_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_atom) in
    Obj.repr(
# 284 "parser.mly"
                        ( [_1, get_error_infos 1] )
# 1380 "parser.ml"
               : 'list_expr_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_atom) in
    Obj.repr(
# 290 "parser.mly"
        (_1)
# 1387 "parser.ml"
               : 'funccall))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funccall) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_atom) in
    Obj.repr(
# 292 "parser.mly"
        (Call(_1, _2, get_error_infos 2))
# 1395 "parser.ml"
               : 'funccall))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_tuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 301 "parser.mly"
        (Let(_2, _4 , get_error_infos 1))
# 1403 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 303 "parser.mly"
        (LetRec(_3, _5, get_error_infos 1))
# 1411 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fun_args_def) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 305 "parser.mly"
        (Let(_2, List.fold_left (fun a (b, c) -> Fun(b, a, c)) _5 _3, get_error_infos 1))
# 1420 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fun_args_def) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 307 "parser.mly"
        (LetRec(_3, List.fold_left (fun a (b, c) -> Fun(b, a, c)) _6 _4, get_error_infos 1))
# 1429 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'fun_args_def) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'types_tuple) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 310 "parser.mly"
        (Let(
      FixedType(_2, transform_type @@      Fun_type(Generic_type (new_generic_id ()), _5), get_error_infos 4), List.fold_left (fun a (b, c) -> Fun(b, a, c)) _7 _3,
get_error_infos 1) 
        )
# 1442 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern_tuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'types_tuple) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 315 "parser.mly"
        (Let(FixedType(_2, transform_type @@ Fun_type(new_var 0, _4), get_error_infos 3), _6 , get_error_infos 1))
# 1451 "parser.ml"
               : 'let_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 322 "parser.mly"
        ( BinOp(addOp, _1,_3, get_error_infos 2) )
# 1459 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 324 "parser.mly"
        ( BinOp(multOp, _1,_3, get_error_infos 2) )
# 1467 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 326 "parser.mly"
        ( BinOp(divOp, _1,_3, get_error_infos 2) )
# 1475 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 328 "parser.mly"
        ( BinOp(minusOp, _1,_3, get_error_infos 2) )
# 1483 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 330 "parser.mly"
        ( BinOp(orOp, _1,_3, get_error_infos 2) )
# 1491 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 332 "parser.mly"
        ( BinOp(andOp, _1,_3, get_error_infos 2) )
# 1499 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 334 "parser.mly"
        ( BinOp(sltOp, _1,_3, get_error_infos 2) )
# 1507 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 336 "parser.mly"
        ( BinOp(ltOp, _1,_3, get_error_infos 2) )
# 1515 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 338 "parser.mly"
        ( BinOp(sgtOp, _1,_3, get_error_infos 2) )
# 1523 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 340 "parser.mly"
        ( BinOp(gtOp, _1,_3, get_error_infos 2) )
# 1531 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 342 "parser.mly"
        ( BinOp(minusOp, Const 0, _2, get_error_infos 1) )
# 1538 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 344 "parser.mly"
        ( BinOp(neqOp, _1,_3, get_error_infos 2) )
# 1546 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 346 "parser.mly"
        ( BinOp(eqOp, _1,_3, get_error_infos 2) )
# 1554 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 348 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1563 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 350 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1572 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 352 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1581 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 354 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1590 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 356 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1599 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 358 "parser.mly"
        ( Call(Call(Ident(_2, get_error_infos 2), _1, get_error_infos 2), _3, get_error_infos 2))
# 1608 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 361 "parser.mly"
        (Constructor(list_elt, Tuple([_1; _3], get_error_infos 2), get_error_infos 3))
# 1616 "parser.ml"
               : 'arithmetics_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 365 "parser.mly"
        (_1)
# 1623 "parser.ml"
               : 'seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 367 "parser.mly"
     (Seq(_1, _3, get_error_infos 2))
# 1631 "parser.ml"
               : 'seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetics_expr) in
    Obj.repr(
# 371 "parser.mly"
        (_1)
# 1638 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 373 "parser.mly"
        ( Printin(_2, get_error_infos 1) )
# 1645 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 375 "parser.mly"
        ( ArrayMake (_2, get_error_infos 1) )
# 1652 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fun_args_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 377 "parser.mly"
        (let d = get_error_infos 1 
        in let l = List.map fst _2
        in List.fold_left (fun a b -> Fun(b, a, d)) (Fun(List.hd l, _4, d)) (List.tl l))
# 1662 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'let_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 381 "parser.mly"
        (In(_1, _3, get_error_infos 2))
# 1670 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 383 "parser.mly"
        (IfThenElse(_2, _4, Unit ,get_error_infos 1))
# 1678 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'prog) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 385 "parser.mly"
        (IfThenElse(_2, _4, _6 ,get_error_infos 1))
# 1687 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_list) in
    Obj.repr(
# 387 "parser.mly"
        (_2)
# 1694 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'seq_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr_atom) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_list) in
    Obj.repr(
# 389 "parser.mly"
        (TryWith(_2, _5, _7, get_error_infos 1))
# 1703 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_list) in
    Obj.repr(
# 391 "parser.mly"
        (MatchWith(_2, List.rev _4, get_error_infos 1))
# 1711 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 393 "parser.mly"
        (BinOp(refSet, _1, _3, get_error_infos 2))
# 1719 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 395 "parser.mly"
        (Raise (_2, get_error_infos 1))
# 1726 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 397 "parser.mly"
        (Bang(_2, get_error_infos 1))
# 1733 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 399 "parser.mly"
        (Not(_2, get_error_infos 1))
# 1740 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 401 "parser.mly"
        (Call(Ident(_1, get_error_infos  1), _2, get_error_infos 1))
# 1748 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funccall) in
    Obj.repr(
# 403 "parser.mly"
        (_1)
# 1755 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 405 "parser.mly"
        (match _1 with
        | [x] -> x
        | l -> Tuple (List.rev l, get_error_infos 1))
# 1764 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 409 "parser.mly"
        (match (_1) with
        | ArrayItem (x, y, _) -> ArraySet(x, y, _3, get_error_infos 2)
        | _ -> failwith "error")
# 1774 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_tuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 417 "parser.mly"
        ([(_1, _3)])
# 1782 "parser.ml"
               : 'match_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_tuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 419 "parser.mly"
        ([(_2, _4)])
# 1790 "parser.ml"
               : 'match_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'match_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_tuple) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 421 "parser.mly"
       ((_3, _5)::_1)
# 1799 "parser.ml"
               : 'match_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'prog) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 426 "parser.mly"
        (ArrayItem(_2, _6, get_error_infos 1))
# 1807 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 428 "parser.mly"
        (ArrayItem(_1, _4, get_error_infos 1))
# 1815 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 432 "parser.mly"
        ( [_3; _1] )
# 1823 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 434 "parser.mly"
        ( _3 :: _1 )
# 1831 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 448 "parser.mly"
        ( Polymorphic_type _1)
# 1838 "parser.ml"
               : 'polymorphic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "parser.mly"
        ( Int_type )
# 1844 "parser.ml"
               : 'types_atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "parser.mly"
        ( Bool_type )
# 1850 "parser.ml"
               : 'types_atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "parser.mly"
        ( Unit_type )
# 1856 "parser.ml"
               : 'types_atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'polymorphic_type) in
    Obj.repr(
# 458 "parser.mly"
        ( _1 )
# 1863 "parser.ml"
               : 'types_atoms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'types_tuple_aux) in
    Obj.repr(
# 463 "parser.mly"
        ( let l = List.rev _1
        in match l with
        | [x] -> x
        | l -> Tuple_type l)
# 1873 "parser.ml"
               : 'types_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 469 "parser.mly"
        ( [_1] )
# 1880 "parser.ml"
               : 'types_tuple_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types_tuple_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 471 "parser.mly"
        ( _3 :: _1 )
# 1888 "parser.ml"
               : 'types_tuple_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types_atoms) in
    Obj.repr(
# 476 "parser.mly"
    ( Array_type _1)
# 1895 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types_atoms) in
    Obj.repr(
# 478 "parser.mly"
    ( Ref_type _1)
# 1902 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'types_atoms) in
    Obj.repr(
# 480 "parser.mly"
        (_1)
# 1909 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 482 "parser.mly"
        (Fun_type(_1, _3))
# 1917 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'types_tuple) in
    Obj.repr(
# 484 "parser.mly"
        (_2)
# 1924 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'types_params) in
    Obj.repr(
# 486 "parser.mly"
        (_1)
# 1931 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 491 "parser.mly"
        (Called_type(_1, []))
# 1938 "parser.ml"
               : 'types_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 493 "parser.mly"
        (Called_type(_2, [_1]))
# 1946 "parser.ml"
               : 'types_params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_aux) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 495 "parser.mly"
        ( let l = List.rev _2
        in Called_type(_4, l))
# 1955 "parser.ml"
               : 'types_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types_tuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types_tuple) in
    Obj.repr(
# 499 "parser.mly"
        ( [_3; _1] )
# 1963 "parser.ml"
               : 'types_params_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types_tuple) in
    Obj.repr(
# 501 "parser.mly"
        ( _3 :: _1 )
# 1971 "parser.ml"
               : 'types_params_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 506 "parser.mly"
        (Called_type(_1, []))
# 1978 "parser.ml"
               : 'types_params_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'polymorphic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 508 "parser.mly"
        (Called_type(_2, [_1]))
# 1986 "parser.ml"
               : 'types_params_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_def_aux) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 510 "parser.mly"
        ( let l = List.rev _2
        in Called_type(_4, l))
# 1995 "parser.ml"
               : 'types_params_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'polymorphic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'polymorphic_type) in
    Obj.repr(
# 514 "parser.mly"
        ( [_3; _1] )
# 2003 "parser.ml"
               : 'types_params_def_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_def_aux) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'polymorphic_type) in
    Obj.repr(
# 516 "parser.mly"
        ( _3 :: _1 )
# 2011 "parser.ml"
               : 'types_params_def_aux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types_tuple) in
    Obj.repr(
# 522 "parser.mly"
        ( Constructor_type(_1, Unit_type, _3) )
# 2019 "parser.ml"
               : 'constructor_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 524 "parser.mly"
        ( Constructor_type_noarg(_1, Unit_type) )
# 2026 "parser.ml"
               : 'constructor_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 528 "parser.mly"
        ([_1])
# 2033 "parser.ml"
               : 'type_declaration_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 530 "parser.mly"
        ([_2])
# 2040 "parser.ml"
               : 'type_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 532 "parser.mly"
       (_3::_1)
# 2048 "parser.ml"
               : 'type_declaration_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'types_tuple) in
    Obj.repr(
# 536 "parser.mly"
        (transfo_typedecl(TypeDecl(_2, Basic_type _4, get_error_infos 1)))
# 2056 "parser.ml"
               : 'type_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types_params_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_declaration_list) in
    Obj.repr(
# 538 "parser.mly"
        (transfo_typedecl(TypeDecl(_2, Constructor_list (List.rev _4), get_error_infos 1)))
# 2064 "parser.ml"
               : 'type_declaration))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
