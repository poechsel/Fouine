let rec list_map f l =
  match l with
  | [] -> []
  | x :: tl ->  (f x) :: (list_map tl);;

let rec list_length l = 
  match l with
  | [] -> 0
  | x :: tl -> 1 + list_length tl;;

let rec list_tl l =
  match l with
  | [] -> []
  | x :: tl -> tl;;

let rec list_hd l =
  match l with
  | [] -> raise 0
  | x :: tl -> x;;

let rec list_fold_left f a l =   
    match l with   
    | [] -> a   
    | x :: tl -> list_fold_left f (f a x) tl;;
